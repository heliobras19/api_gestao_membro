<?php

namespace App\Models;

use App\Models\Localizacao\Comite;
use App\Models\Localizacao\Municipio;
use App\Models\Localizacao\Provincia;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Membro extends Model
{


    use HasFactory;
    protected $fillable = ['nome', 'email', 'telefone', 'sexo', 'data_nascimento', 'municipio','comuna_id',
        'comuna', 'provincia', 'bi', 'pai', 'mae', 'mae', 'ano_ingresso', 'onde_ingressou', 'numero_membro',
        'cartao_municipe', 'comite_id', 'estrutura', 'foi_militar', 'scope', 'habilitacao' , 'bairro_residencia', 
        'natural_de', 'nivel_academico', 'is_provincial', 'partido_anterior', 'is_quadro', 'data_emissao_bi', 'numero_cart_membro', 'formacoes_politicas', 'data_emis_cart_municipe', 'data_emissao_cart_membro', 'onde_combateu'];


protected static function boot()
{
    parent::boot(); // TODO: Change the autogenerated stub

   static::addGlobalScope('municipio', function ($query) {
       $user = auth()->user();
        if ($user->abragencia == 'MUNICIPAL' && $user->admin == false){
            $query->where('scope', $user->scope)->where('is_provincial', false);
        }

        if ($user->abragencia == 'PROVINCIAL'  && $user->admin == false) {
            $municipios = Municipio::where('provincia_id', $user->scope)->get('id');
            $ids = [];
            foreach ($municipios as $key => $municipio) {
                $ids[] = $municipio->id;
            }
            $query->whereIn('scope', $ids);
        } 
    });

    static::creating(function($query) {
        $user = auth()->user();
        $scope = $user->scope;
        if ($user->abragencia == 'PROVINCIAL') {
            $municipio = Municipio::where('provincia_id', $user->scope)->first();
            $scope = $municipio->id;
            $query->is_provincial = true;
        }
        $query->scope = $scope;
    });
}

    public function orgaos() {
        return $this->belongsToMany(Orgao::class,
            'membro_orgaos',
            'membro_id',
            'orgao_id'
        );
    }

    public function funcoes () {
        return $this->belongsToMany(Funcao::class,
            'funcao_membros',
            'membro_id',
            'funcao_id'
        );
    }

    public function linguas () {
        return $this->hasMany(Liugua::class, 'membro_id');
    }

    public function profissoes () {
        return $this->hasMany(Profissao::class, 'membro_id');
    }

    public function nucleo () {
        return $this->belongsTo(Comite::class, 'comite_id');
    }
}
